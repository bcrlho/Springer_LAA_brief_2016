%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - NAV.doc)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 17:58:15 01/18/16
%%For: (Dung.Ho)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%ADO_ContainsXMP: MainFirst
%%BoundingBox: 88 564 506 722
%%HiResBoundingBox: 88.1248 564.375 505.874 721.875
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%+ procset (Adobe Acrobat - color image support) 1.2 0
%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W1 vm op crd OS scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt  0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict /ct_CffDict 6 dict put     
ct_CffDict begin                    
/F0Subr     
{
    systemdict /internaldict known 
   {
      1183615869 systemdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } 
   {
      userdict /internaldict known not 
        { 
          userdict /internaldict 
          {
               count 0 eq 
             {/internaldict errordict /invalidaccess get exec} if 
             dup type /integertype ne 
             {/internaldict errordict /invalidaccess get exec} if 
             dup 1183615869 eq
             {pop 0} 
             {/internaldict errordict /invalidaccess get exec} 
             ifelse 
          } 
          dup 14 get 1 25 dict put 
          bind executeonly put 
       } if 
       1183615869 userdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } ifelse
    [ 
       systemdict /internaldict known not 
       { 100 dict /begin cvx /mtx matrix /def cvx } if 
       systemdict /currentpacking known {currentpacking true setpacking} if 
       { 
          systemdict /internaldict known { 
          1183615869 systemdict /internaldict get exec 
          dup /$FlxDict known not { 
          dup dup length exch maxlength eq 
          { pop userdict dup /$FlxDict known not
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } if } 
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } 
          ifelse 
          } if /$FlxDict get begin } if 
          grestore 
          /exdef {exch def} def 
          /dmin exch abs 100 div def 
          /epX exdef /epY exdef 
          /c4y2 exdef /c4x2 exdef /c4y1 exdef /c4x1 exdef /c4y0 exdef /c4x0 exdef 
          /c3y2 exdef /c3x2 exdef /c3y1 exdef /c3x1 exdef /c3y0 exdef /c3x0 exdef 
          /c1y2 exdef /c1x2 exdef /c2x2 c4x2 def /c2y2 c4y2 def 
          /yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def 
          /PickCoords {  
          {c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2} 
          {c3x0 c3y0 c3x1 c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2} 
          ifelse 
          /y5 exdef /x5 exdef /y4 exdef /x4 exdef /y3 exdef /x3 exdef 
          /y2 exdef /x2 exdef /y1 exdef /x1 exdef /y0 exdef /x0 exdef 
          } def 
          mtx currentmatrix pop  
          mtx 0 get abs .00001 lt mtx 3 get abs .00001 lt or 
          {/flipXY -1 def} 
          {mtx 1 get abs .00001 lt mtx 2 get abs .00001 lt or 
          {/flipXY 1 def} 
          {/flipXY 0 def} 
          ifelse } 
          ifelse 
          /erosion 1 def 
          systemdict /internaldict known { 
           1183615869 systemdict /internaldict get exec dup  
          /erosion known 
          {/erosion get /erosion exch def} 
          {pop} 
          ifelse 
          } if 
          yflag 
          {
              flipXY 0 eq c3y2 c4y2 eq or 
             {false PickCoords}
             {
                  /shrink c3y2 c4y2 eq 
                {0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs} ifelse def 
                /yshrink {c4y2 sub shrink mul c4y2 add} def 
                /c1y0 c3y0 yshrink def /c1y1 c3y1 yshrink def 
                /c2y0 c4y0 yshrink def /c2y1 c4y1 yshrink def 
                /c1x0 c3x0 def /c1x1 c3x1 def /c2x0 c4x0 def /c2x1 c4x1 def 
                /dY 0 c3y2 c1y2 sub round 
                dtransform flipXY 1 eq {exch} if pop abs def 
                dY dmin lt PickCoords 
                y2 c1y2 sub abs 0.001 gt {
                   c1x2 c1y2 transform flipXY 1 eq {exch} if  
                   /cx exch def /cy exch def 
                   /dY 0 y2 c1y2 sub round dtransform flipXY 1 eq {exch} 
                   if pop def 
                   dY round dup 0 ne 
                   {/dY exdef } 
                   {pop dY 0 lt {-1}{1} ifelse /dY exdef} 
                   ifelse 
                   /erode PaintType 2 ne erosion 0.5 ge and def  
                   erode {/cy cy 0.5 sub def} if 
                   /ey cy dY add def   
                   /ey ey ceiling ey sub ey floor add def   
                   erode {/ey ey 0.5 add def} if   
                   ey cx flipXY 1 eq {exch} if itransform exch pop  
                   y2 sub /eShift exch def  
                   /y1 y1 eShift add def /y2 y2 eShift add def /y3 y3  
                   eShift add def  
                } if  
             } ifelse  
          } 
          {
              flipXY 0 eq c3x2 c4x2 eq or  
             {false PickCoords }  
             { /shrink c3x2 c4x2 eq  
                {0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs} ifelse def  
                /xshrink {c4x2 sub shrink mul c4x2 add} def  
                /c1x0 c3x0 xshrink def /c1x1 c3x1 xshrink def  
                /c2x0 c4x0 xshrink def /c2x1 c4x1 xshrink def  
                /c1y0 c3y0 def /c1y1 c3y1 def /c2y0 c4y0 def /c2y1 c4y1 def  
                /dX c3x2 c1x2 sub round 0 dtransform  
                flipXY -1 eq {exch} if pop abs def 
                dX dmin lt PickCoords  
                x2 c1x2 sub abs 0.001 gt {  
                   c1x2 c1y2 transform flipXY -1 eq {exch} if  
                   /cy exch def /cx exch def   
                   /dX x2 c1x2 sub round 0 dtransform flipXY -1 eq {exch} if pop def  
                   dX round dup 0 ne  
                   {/dX exdef}  
                   {pop dX 0 lt {-1}{1} ifelse /dX exdef}  
                   ifelse  
                   /erode PaintType 2 ne erosion .5 ge and def 
                   erode {/cx cx .5 sub def} if  
                   /ex cx dX add def  
                   /ex ex ceiling ex sub ex floor add def  
                   erode {/ex ex .5 add def} if  
                   ex cy flipXY -1 eq {exch} if itransform pop  
                   x2 sub /eShift exch def  
                   /x1 x1 eShift add def /x2 x2 eShift add def /x3 x3 eShift add def  
                } if  
             } ifelse  
          } ifelse 
          x2 x5 eq y2 y5 eq or  
          {x5 y5 lineto }  
          {x0 y0 x1 y1 x2 y2 curveto  
          x3 y3 x4 y4 x5 y5 curveto}  
          ifelse  
          epY epX   
       }  
       systemdict /currentpacking known {exch setpacking} if   
       /exec cvx /end cvx 
    ] cvx  
    executeonly 
    exch  
    {pop true exch restore}   
    {   
       systemdict /internaldict known not  
       {1183615869 userdict /internaldict get exec  
       exch /FlxProc exch put true}  
       {1183615869 systemdict /internaldict get exec  
       dup length exch maxlength eq  
       {false}   
       {1183615869 systemdict /internaldict get exec 
       exch /FlxProc exch put true}  
       ifelse}  
       ifelse
    } ifelse  
    {
       systemdict /internaldict known  
       {1183615869 systemdict /internaldict get exec /FlxProc get exec}  
       {1183615869 userdict /internaldict get exec /FlxProc get exec}  
       ifelse   
    } if  
} executeonly def
/F1Subr
{gsave currentpoint newpath moveto} bind def 
/F2Subr
{currentpoint grestore gsave currentpoint newpath moveto} bind  def
/HSSubr 
{
   systemdict /internaldict known not
   {pop 3}
   {1183615869 systemdict /internaldict get exec
    dup /startlock known
    {/startlock get exec}
    {dup /strtlck known
    {/strtlck get exec}
    {pop 3}
    ifelse}
    ifelse}
    ifelse
} bind def
end                                 
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3767 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2016-01-18T17:58:15-05:00</xap:CreateDate>
         <xap:ModifyDate>2016-01-18T17:58:15-05:00</xap:ModifyDate>
         <xap:MetadataDate>2016-01-18T17:58:15-05:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:6E1A22F536BEE51181DCB7CA0E52C5A2</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6E1A22F536BEE51181DCB7CA0E52C5A2</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:documentName>5b21ec7a-c092-11e5-0000-a68fbb9cce3c</stRef:documentName>
            <stRef:instanceID>uuid:2f393883-55a2-4d31-bae7-c00bef9d329d</stRef:instanceID>
            <stRef:documentID>5b21ec7a-c092-11e5-0000-a68fbb9cce3c</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Microsoft Word - NAV.doc</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Dung.Ho</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
88.1248 564.375 417.749 157.5 rectclip
%%BeginResource: font BHUAAA+Times-Roman
ct_CffDict begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /BHUAAA+Times-Roman def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development; Cyrillic glyphs added by Valek Filippov (C) 2001-2002; Numero, infinity and Omega made by Dmitry 40in (C) 2001) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
def
/UniqueID 5020931 def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 450 470 662 682] def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38] def
/StemSnapV [85 103] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs [{ct_CffDict/F0Subr get exec} {ct_CffDict/F1Subr get exec}
{ct_CffDict/F2Subr get exec} {ct_CffDict/HSSubr get exec}] def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B8707C25> |-
/space <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
end
%%EndResource
[/N10/BHUAAA+Times-Roman 1 TZG
q
88.1248 564.375 m
505.874 564.375 l
505.874 721.875 l
88.1248 721.875 l
h
W
n
q
0.12 0.0 0.0 0.12 0.0 0.0 cm
q
3431.0 0.0 0.0 1267.0 750.0 4733.0 cm
q
n
0.0 0.0 1.0 1.0 re
[/Indexed [/DeviceRGB] 255
<~!!!$!s8SplUX.94]Y;*U:J\jE_T'U8<E3%2AS(;tma]k<GBnK"lg'"KITT]Sf\"iL
TV)Dj"Q/+pLPL_m['Q-dQ`-j[EH,t-%1Pm#8u\eh]=GIfD/4lZKX%edY-"g8@UdR*
c#e,PO,].hnae%Q-0!qDq"XV?1G]sh)s-2C*ZcC"qtoU@lH./i\@/hO>?qmU'+toj
T:_\/gY3hn+D>J&o^qd=P*-Y!(iXA3rr2mW3B<OtRsTL/Q'IRa.k=%W7?!1_daHRY
^VL3_#uXZ#JV&GZ?=!X5!B)hp5<hG#6:)"d$;=,e-n$Jt0JGUO4=i$9zzzzzzzzz
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz~>]
cs 
<<
/ImageType 1
/Width 549
/Height 203
/ImageMatrix [549.0 0.0 0.0 -203.0 0.0 203.0] 
/BitsPerComponent 8
/Decode [0.0 255.0 ] 
/_Filters [currentfile /ASCII85Decode filter dup /LZWDecode filter dup 
] >>
pdf_image J,itR3$]7K#D>EP:q1$o*=mro@So+\<\5,H7Uo<*jE<[.O@Wk(+9\!)-^757;Rp>H
>po`pVGXQ?'Fb3JJcR!e=>1Eu#6P!WYQtXM%gYH&1AYQ?SPKOpk&J0j5%@Nm<bk^F
GYeAT$Wq4G4!g3;B=(iZ6#aVM.pTSN_a"2q&2tpG#=&;-,a:D!P6E(oi;K\cLW!Xg
_>sp57<+1d!!59;="TbtM#opRSp*>ictIN)4XQLh,moL2q2D8B/gl6B5f#0?49-=`
$>>$a!)Q]EJdDU4h)?.0a5h(;6E7c*(af=dH/1Z^<!"<F$\779kBFVsn9B=e5:;C"
&."0u*GX5#"]Bon6]`j\DO*#.%"J?A0T]l[]5K5(!Pjd6%MOMHPFD1fTf?`M6'.$N
RC`KA$Oai`aD)!8cWhfb"s<n`Jca%B0EB$6\1Wqs+V6VrK0dD,)23%RD&^,r3-$$*
E0tP"_t"4hbe#UJN?c>[m"UT%_2&SQX2"]f*Qh5_8e6G-Zqc1edB&B^__KYd+b8O/
M'^C[8f7u['5S%%_p_L?*!-TO$5`aDP4\W>80A2$KX0ZQ2c,Pd`?)l^5SbD9<,EW@
aL!NEn4j[D0e+r7(cDnUJ,jo/!($)Squ@i^5TbLWeElMJFIc\);">Gm!!j:HD'@/h
I9fIrkbUZQ[OEmH4fN4q![+;e`<@nr<0^r:!'ncg?J:FIF"`24W*BX_i)j'!L7ri=
#2D!<H"s&Si*Aep@(:k/Z/?H]#(`Kgc3f1iMJjBcON<4kKu#_RB"RbaJf[)l7MP#h
nh<HD"5n,B$%lVn80<U13%Pnu^g51p>'O3d#=o9J>7?0O-uooP_Cc(F<Y=."#_U=W
7@UTmCiBXcU,#=Pb)qB=#maSm^N8QD:27UUfB`hV!HgX-)1phG6ihgG=@<taqS6D]
A`42WXiC,m53r@I:=QCY;7LAQK1jRH;#rKJNWK=[,a"1*BN<]9Kj[/G5bTAeF:rNb
At9!<!(uqq[U>I=ab9N#:'^n$R#.kJ4N@%&Cs`)k^@[6tgD^@%===G6Tm-TsJ,p"8
2X)53"<;plZ31^AaYFVWUqf<\`CAWr!>u!t5`>bu2"56&#GP%S:5NAG6mb;eLHbk4
0T^h>p>63;e&+hgRNVY2+Gp.$_)Mc%#B7+9-%&5roH39HBU"bdTXIULg4DNiJ8O'l
5_,atZ]6\6_uKntO8oZU5%r5mR4BRsrF!GWI#)/KVhTX.Oa2E^L!0Z$GNQtR$B,&F
30XPbD?=7"0np$WPQ@F(&0LdF=CdX1X"ZjAJJ8UsW.Z,kO8o_T!)Ej"MuWj5(4b9,
&p/)).M3LUL##D,"X$>P^9B^"f#b?#b^$n:8*U>rJZAicKT`j.%/\-p3HStXideCb
$c-dLI=N>;J,h9Z5q!TP:9YlDTE#FP0L0tVL'j_!.M,\:<K]qU8>Lo>"p(@s!'hFq
"@*_*!;HNuMj5MK=)<[n0`qZrU]h=&-kLrT"ceP93rf7K$]`"fMdVbL!Rkm.A/n/J
+IE.Zd"p@cC-cjTH:c?/'c#2D.gGQaQH-4Q%1gq=B^P@!!2*ZW#fO&:%6tJT!+#b"
n0BW"r#;%H9$a4s%tW[**rnc;"VVe@"J?c8bj#%l,cX<7?uR7kO<=aY+9i(D>Q]Ud
!!Y^`&;9O`!J&1%7->6a!+=k6K(i.SJ;=T,^mGC\0R<l=8-f6)0F@n[jqIkJA=jQ@
p&mWM_IrfHRLM@tYW@*==EkJZ@&sVV(s<7,-qAG+C5ej:#5*L+"/he##Qn*1!nRgI
UWmHYJH-KLl'ata#P+D6RWd^.HX(?'Og.'[9/drk"9Uq*VF-ckG8P[2CDF"d<i3CZ
dDSmJJ/BG.9$7ES4"uR-_=7S[lWmtJMQel_%t]=I)lu(f"ebVqR^*\0Jb]k^2G!ql
B1k6^)bm\r[_X$'ILtkgBa9A`\e*O(BW)B@7i%N@!H<,d/;:Z.p9a,dn82G_M:2]q
@"Q=IU]=@"$383O'EWeQKE9!V$312M"B8nB!C/90ZiTu-.sGJF']>K=g@HJ7LioP2
aZ<f8-@uWF5l_kn+@+F*`/l;MSnKnb!&WOr^eb^F!)3Keg^+)4c9Ye3$>UJS$=R0k
L%*)"_cU^URc$kei52F\KOc'T+<-(j7Oc;YE#/ObR#oJ]^qN:C+13dmK?,/pIqCei
"R)/Q_O_#:^s68:!ih',"JGer,3An;,S)B'29K&t.V2keQ1Dptb?83Y!2)LeE<Gl5
5\uD^i)H7&hJ(5;Y;Lk2E"@M-6qD!ojC9u!"3EN#b_-a,!!cWU_./K/o9N4+=[Nf%
"oV6U4G&+!;A;H#,mjXn*GJe2V=_cqdopZbC#(fX!0^=f@7O41>tq<k7]FpAY?#Do
?*!WV5mhqU<lD3B$+0E:f37WL""G8j!G8+XRh&tD!2^(0I`9uE04o%VS[8!..FKK?
#m>QnpYGlM#XFV'!!$6*bKp9<i=^pQ>fK'P#uBA]YBFg>h7NE9n_RKrH>d*V^%]PB
hcoPu+!Li_$e(-E!!ET/O96.iO:"uHj8olBP_9;Z0*470!<I-C`V@Ikj'6M_ES`k!
q#CHtYIl"ZIOE857k*P)YEj4c?-E&!1$&C_-G^1'bW)dLk?RJIEY'i.hS9EZr=>WD
E!6";H1pI80;`jJS^[Fj0EU]"PQP<6&Ine',hlKD'X.rX!2`A3+JKnX\!k2%A%(bW
QaNL3gRX5N;C%n\"(!ZN'1'_A#bYi>"&K+'!@b__+?1!Xn,m)!^aBDq+\O#`I0O6'
!eVUt,?a(k!.^ADmKPtt"!AcqLeETlj:::XF_>GrW]s-peoJ.9Jd*6FRj#5eP[ZC#
[fLEQ!&qn+"4)5j607B!i:DbOU(S-]=0D>:>Qo\2*sM]^5L*)5(P(FYOQj/4q.(@4
4Ph%@rn.aNTdC29-Y3K(5Ra_an*lEh-AcmG3PPO#Lk,OH@@L($0CWKa;UgF&!'L-S
g'<Gl,m?('JgLVn?MEX"S'Qb2aFK.Y564RBq-[$QJ,fpA+ooD0"bK@WiW]Pd3!3P@
!.\efE"F/qIT2*f6n_Aa8)CTuKLbKIreGgG_?p@=8ctdl!bgKsi!Kd0;$A-N"+Yu+
8BqAl/:9(oOsE3mTVe#/&6(mp`rH/B!%uTm?m%^,"Y3s]TG.R1/-Q#G@3?^!DjCR"
CBCC0"TTnD-nu1W^cB;h%Vt.A&8DH%Q3dNmHOnC%+?g(SJ6i40!?cIf,cJ3Q/-@#f
qX9_KY[2]$o^uk8GRapK-"^2]kQSk7+CJB$!+[3=mKJ1HJ%uiY6rjVg8-cpc$(t$O
i/@nZ[dhEoaj25b&Jk`V4p'Xto1ugB$m*e-i,upq+@(+^?nMZ*3!*Vs!$GAFKW,]I
VYJ-\%M+(qBJT@9Q3WM[rd\#pYbWC,8C(j>C17ARi0jWg7LDC3#=*57TJYTb.L/4N
"u)A:8G*1b_L_0?HmLiDjFkN,;M`P-+QRtW63I<SJja"8#@M!GXptQLDu^JVD(jUi
i(/JKob0j\A<Cb#-ZL?VkYn-1!Kn'@Xr?ffAp6Kq![)eAWQ^S\q?]D9$."P2Yj>ms
*df_d66LO_&*T@>[2QmbLnF_O7fWVT=o_)Y;.+DLNr/l":&t>V)K1R&YqCDqEe>]S
,XahCl[]3brVuqW#:0ETcK-=g)^d,XA<A9f-"dEX;YDAh<<mXPKO,rlrs43#pla98
')`b&MYM5t!<?.$L3t8><!(Kp07jf:^mcW"iiZrM"+Ub!,X)4D$Mj96%'$E2;]Hsu
D#B)CIIg!YVm.i7,W=![1c&A\?sEmH5_B_[0W.Nr'%B3t>QBt/2=l2=:Yuc)l3=14
K-29AdXXYtD`2Zd3MI?\o1j['*0hniq%DaUmpR;:SNC9f"lKa5U':b]+C0nkDr=n]
Jcl+I/d)j@4gWs-oAMkhjZ[bM5+k.@K5DDp_`n;9"RG)1O%LN[>lfR_"*=u;oFXAG
'gZpW":'Jbe%%dq\L.Fa#E/EY!+83f2NNG^[L/6!'!b+]qVP42Hr76nN!L]'H2mpT
9$&mi/\4P@#kj8T6<%bDB,s#WjoZa#"Aic(^f1;gU]f(e#Rnu]j-*%kPW7T?"5lm9
#Jr*3e0&KG"[IA<Vm$88U]l9:[X_=KiWf[<4%sb<9XN&<o[-@j)!82D7c602;@;@F
NZ^h3#R"0/!X+V5]HBaaW(QYWo`7lH"]0=J:pg^?i(cElTQ\+u#&c%<Xo?`k.V+d@
,deD<5XSI-2,eWX;mebeTK7pOgICZL/oYf*U@)2M:f_&>_>n2;9A2kN-W*aHpduM0
O$QZ5C5jnQ,dbB],:3U;P?;sa=LF,jooW@lDULC46:P`'J5AHq!!7(H#;3r=9r@L2
qQ8:W5]pZBPnnJ;Id\Hb!MW6gVpGLDoH^<^fCaRm,^ol=Kip:t?F?&$Q('je8L&fk
WBd=mTRg)c.lLpe#&eckFh0pt^K`-WG8'X9^]4A0C]^JL8;&,]!2+9'j'HlqA$qM'
?iaUk+p>);\cVe1KN8B<#nrIM+Ee?*,VNS>W;&duFhhX!APc;O(u1A<+BCF2eq$rs
6"Ep&G89lZXG?iXKRJGD"9<WJ!02!k?Y0EIAk4X$_?^:cN-?Yr"(c(H^^Fps?YB(b
CnQu*G)85UB/QU6/qA3<!!m_q1&rYQ#Z$@nAAE4tY-25>CGiY'<G7!kbALbm"4,U%
^bPn(6PenD"u%?>Q')>03!g^:!V[mHG:-_j6Z"W/%8$C$$E2kRAd-Q>;,e]W"H:6q
[Zg!fWShNMAD:k>lOH5e_F*7o1^%*7E-#ItEYXZ:!0:64&-00f!<<Z6+:nS36Y#fZ
F-Bo4J>XIJ.<Pc2W^e$3^mYKqoE9.8O2rY=f497o5R4T2,.Du&^`ER8.L,09"D4;4
!%\30@L)rt#2gS+(=@EV>VAqQhr#_-Jd_We3/uOg7_hchTUlB2L04M&7%g7\$4KTE
_L*hu%ubN5Jee?QbC&u>Gsqc8^^p_.)?c]kMtO"LU2tB5LOV8U1S>6PJ81UI!:?Y[
,$%uLpARD:(4BSVX2%JBTKY!dMEhtfE$sq?aJJu\9He/8#hKAh'n]X3Nd[Q%#J`1?
J:Dh%(-2Ff#PWk#(Rp,ap]NiK!8q#bQOG.4M*1RdNMKAri0FYA:k.#(Hj=Ts#YYD2
]E<#l"N#D^f>39`_uRSrlMsLl@S-fKgQ?Sc,iCMOK(WGMO9?[_"5j@aZRc7;CLTOq
!+lcDTT=e/=,],X"Xb8o1hb^J9nrkc"_L:,J0mPP\d"q6!!%hBjM-:ZCbB+=HO\m5
G1VsD@K<kO"5mnp!)\Fm68@D%#<.KbQT(/5Lkaob!7%Q45S]bK[@9D`L-eK5ie`2]
0El'S5T"rB7^>Hj<!Cop5e1uYZ]8=$;C(1*"M)"2E;Cj<0Ig0aV'(p(i!]maGQ]..
"lKpr3BHnDF+3o#RQ72F!#o<Y!,>FN!&%`2V,s0f@RQl4K\=WPl?l3X]9bM\HluGi
M801/C+_qQ!qnL/22hY\NX&s3RkFsH?lB=F/W4!p#8k.C)BT6LEZi.,J-$(XU(*kc
$EN(b#s]#ZEk5Xd+FO54X9<I4k=GC_VBD0A+CIVu32)L8NW>_'#CnK22VqK-"9IEn
!FR6%^^65d)lPGg#b[N1678a8h#7:a"m<T$U@';"IY?EH>R3(dTS6\2/YA]-!ha91
TFmJ4N[E\("(35U+Gp5I+g-.U!?*F33qQ/)#R=a""lKdjqb.'AD?K]EJm(e6><X5K
q?A&sXPdOmFlWQ'*![T?"/%Abi-kn+7>73lq/9\kU+N`5Q3Cp&WeuB3b);(f%"eY!
4$kBgTL&\U%](9[Ee'3[>I4\u[?O_<PadR)6s#!B1V$Pb4.<BlTI^DuomGJ%BK)8k
)i;5e(^4\-+k`&4kV9c?gV*&eT=3!NS+FB]&q+/H#!68o,"V_;/:7'c\N*g+[Cs!2
9.Q_o^t]I,S.m-%d!ZVt+b0t.'5Uj+4+b=(^fIGML=A`k/&%Ik_tH1.3Z\?K"<g$L
#f('=MmlYGQiS<:!$Eg"B$peH)'^7R![)K-A[V\K*@'Y,-h,fr!+qIc0Kajq!dN+n
VUf$>2e.%bbe23Er6`bOELK=.OZZQI^k>ZPBP8NS#CrNK!1;(4!1/4J8raAcb@h!V
$bF9B!8-9U5W/dDITuagdCgRJr?9TP-.72g"Q4P4(Wpim3!k@p,6^mL@!C*`7FZ`W
e@eT+TRM;/(!fB[1CNn%^j]);&->+58+JFO.EVc`@XI0:I1K]f6RAdK\-%7F!kjTG
rK5brQ.^SRftEs0^g;;Z;@'t.g7TntLO]WF-jY73gV(;TrP@8P`S>m`ggDN8^_-rZ
A(oblh7_Y#rSRaM7%qCQ".eK*+?nPQKEXO7hnB!GrW1q@!!f:k!<)BErXn*Q(#aTY
Y_#a[!(c)N8;U_&Hh,7B+Ck_JF<mr*I4)dV.qf,P('T4E4U57\ISo2j<TS[4jh>$^
raFqQ?P_^O!$Fr=KR]o&a?L)$-6u6A[FkYt3&gm<!TY.&9mPteQ0D[u"b<6LSs[tl
<!L-@lFsCcritcQ[Hi:Plb:"8Kon)rOm5-Pm(U]m?Cg@&cfq)r#2\2'ro*9/jmIT[
_$q^XIdukjp$[@T"^'2!+;5,r=Q&,-3rh=Q@S0R17L-^CU#(;(?in*94:$_o+02%;
^G5=E2=l;Xo=mH[s$?9A7J)($oY4,ms$R*B?ifT,ocIK4s'bUcAbLUE]-%XgnB(Br
Fn^B2pV1?YJkuUn2^e[$aIn1d]QsPXU&dUW!EjdM@&4ktFBB0q"<]T,gD.XN#dW4d
=eL&W=7h&ePQ?)h#7kjdX.TN0iW[\*"f8p5+E1*%GQC')#69$++1*/DIhl8\DGqMT
@K6fWLu<i7@(6:FKgOa[fN;7-*umYBO]\ts0c>s?j,r!dIR,-2KL.pQ'V8/NPtL(e
+NSS+0pt_p_]T*=Du]s^LQb=%rddA/;!=-I2'.lOO-)f*M7G/k*?*A+Q!1S%-k$(X
Wtj@\>+?2.f]<0B!;afO[9DVnn,RdfEMSA?(+Y[,()%-P5QcAPrrI\e@.9OcT[NWr
"iEiogbqA?*?\MU3EXZ'!$BBb#;kq'-jMX1BAk&>\HIL/+9eKb]llee!"nPjOLigA
CIoGhp2Ija12dL6"b6]L+F"M+h"'q9JN1-,Y82dGh&7,`!)O@r`1bQA#&Y62"NV`o
#d;N$$Ne0GDV-dZ($g84Ti,.5l&cGh!<8Jn,QKr$!+l3\CS6!-!oV-*!/5suTHK"T
!0.$]!!n7I":t,_Tn+<g^CDrjkPtrX.@<l"J8ZCDKRht\S:q)scrM=r^`WV#[p`C5
!lj2$N$$!d&nDd_#XjE_KtuH.,UG^EDB_&*!.on.huG$V"<g;;L]`0h>Rq')#UC;p
huF<:]!?/'O+s=5V`$1!F3utC5q6dW+[K=9!.[<7CkW1PfPUbC_LQkRKJ*<6!!>Ku
[lVqce$-Sb93?*F;TSo:!!d21GT/uJ889/3_(ZiP$*O>V"b78rL&fIteRjL<6.eV0
/:\Y8>bci'D?D&tMJh!qiTaebK7ShL!/=oA.OY9>V&K/2[E(rBad06:&qJJc[YtHj
]/55EPfaUQ#-$pe'83"eU(Xh`\1])^'X/ZShTEJn\6he2E%.[Ba>sqq$+qj>@47d4
qr(.D3$CMrEZ?-(CeE*3j![X0N@;9=3e`8q&0;8e+T=Te?bjGW#%]8&[.@kMAS%9:
9V,a_Vp6U1SEIHVJ"UI9&eqo[RMo-<!!tQEVIGL%T;ZKcQD^`t]!efDCH@7QliB/u
^T_N9(<<^s].a=\2]?Sb!.hN;'=_pAQKPhs]=.1@D`cPE^2LXWs1fu?P!PN[3dZRt
U>`%g([[5bL`(`9YXuuX]XKQ<F$/&5c?$Ym5K\c_\<[V[+jWI(FZif-eoeZM=pkWZ
!^%M1!74(3LOp@((5)9N$A8P4aA[:-Mkq0/2P:mcC;dr%-cGg/`2o"$$-V+nJc_*S
$.Bs<3XLT.?_l;0Jd]L0rBFB8p3j]"htVXbQfn3n@;m>*I_XM/rdV]Ss*tX\jT5*f
7nqV9"iT11!K[9geD^O3KR=Dc:`B-O/*?md"q<l.3"H!C560X$%RN-H$"5Y8!$G;D
OiS"4<<t9F:cPqSU2CH3pd6^==P#`Ld0\e(5@#CN)T!nP&RmReKb12D6I;"u!WXbO
!1_s\E#Pq%d2iE`*ZZ-.Gm7_G?[q"l#(ge5(aCkMN=W0+_Ql*.9/%Fk;+9l&!/*Z>
!B4KkC_hOXq%h2-?&^TCpd*h$#\4X)OV&ou&ZAl-^f1_s9^i%5FJ_Q%lNiR!rX;>c
&deV@)Zat%"\Hg,s'o9`-Lo#%ScA`neDM8h+F"M&"[ki^-nLYsAkbYG9-?Jr/sL:u
Sq*T/$77#9-a0>!^7oq_hCF=A$H8"Jfr4f03?<Yrga@`i9+4JH0F*9h*DH7^oOZF"
O:tYNK$[g1!IR:`i8>RX6P^$E3%G5j'H@+WM@(`dr<EQe%K`kB#lpKZ#QP,@"&Mf!
J7'`)^b0M"W[PKR;'#o!<Ep)sLp01D*)ZbR+9B"KA]ifk1%V9"`/3+M-[Y@e!2'c%
O9,FaJM8mQ/Rb$nQ@^QA(]b7GRt8!:\CBFl"p"`VcO*`&B";8.M$B1]>#eL14Mdlp
[8$^0#R$+5#QPOJ!#Vp?U4M5)"[H>(!+:Bd!*s!.<K%1`e?#f&[(WI"/oq[>)FLJU
;_U(0]>AhU"i+D;IC&_V")s,+ab7$$8<=%+!+;lnfGOnoN@Y/CPQOP)3)@Id)uuY)
?`Y6CY93rWJKSQq$4%UO!3/Tk^l3fF!J7OVSe;.@%MC$Cn-&fV(k;UT"+aiK"lQ<k
KO=ic5gkSk1rLLr0Lgm"QjEaDY(OFWE"TsG?FNfRCOn<):+Q,s#c-N%_,ECmXhD6.
GD6c]TGpoRIDGpb"=&M+=965\1Ot!@)hO`E&qCB7"/)"]Y$_6eOW*KgAD"kQ'ZFN7
P\-0="h4SpNJDKH+2f"O&RmR&@R?.`"SM3WQCDrLi!:_4@2'Wp.tRtU.Xj3j(]XTE
(^uX.+pRfj%Y5`2&V5qp5dU\L\1eSMEHGoZi)V6>O;JN1*`pN&B.[]-\X,VT?md(m
!s0Sd`3ES2^,\@dK>NufE3nlMTG.PCE#&S-#UKO<#TOM!j9\+@df:`5*X'9U!,e_m
"f1f%!"^3;o2KD&i%"$26AK@`\.gfsBEVpg!K2&Hr!*bgr6kX<'1,e%HY-Zj>WGmf
VVjQ<i>Tpj!)TNnF"7F0(^`i"7LoMT(=W%fMib.q"sBm3"@4?rbdL<F1ISn.0DHLg
YSX7qKHbGE"9S]Z+qE%W70*DX*9jr\%ff]i![&I%K7F.-5aWYLF`e4F&4M4i#187X
UoXRCI;?92ERW\%@0BCr!OI.=27gA59PK\Ghb=+SBHdkU!-!#\.FeTpN%&[o"V:@T
="]A3J+*lqa'[1Q!aliOn9qLW+*>L*5Ut]D=@G?E9eh&=L_YNu9tkcg?3+Gf`pu;b
ZoRIDN'OQC6=)7l'ou#On<8ou?r-jd,5M=U0G8qWV?oQ2\=LmO+8'h"aa/m8K>99q
G(-49b,KKp$n)1-!#l9%0m!DgX[]"5k^>E$CjeRA#Q\-?i&U7D.Y&E!0VD6m!9&a,
o$A_-U3<0Tc[YH@B=%Aj:^+W_*-sWh!!E,!,g!PicX>NF!"Oa2^fXO$'Z\mR5ABM5
\$u)QkM:L"H0i<P$WV_dhY]TpnU<F;q&_!FJ/_m!,c!=r:O!TSi(cY)BGgrh//BCJ
H4'aKHN\:D'cF4u')#KK#+u<Un,&b[iDb(tV)Xuu.k3m0_/oc@(]XZb,S\_=-GP'F
!'hD&A-0P'"2I;-^f1KQA-Thk#J`;4+CRKc<!pFJ$c'[h^sih/j:8ut&&AAVJ^>9c
Ql/1H'>['N_,M/cA/<"'(VtbA_3>hRU`.'b.>!3Y6.?pjGSL4?*C8a/_A"01,R=FT
ZS:#W^KBhaci=&"iX*+CJS:Q$,0?>`/&K4U_UL0Sj=\=A0>doH_\=iC,VkkR%0-YS
!L,%6(n2.bm>rFqLhHm@fFPm,42]!!_pgiej?CKR5K![e!&M0;&.S_k$H,>#`)K1D
A4FLZ8&U'O`0<j35U*`E$\@qD`7.N"jA*Yc:W3H5`=u1g,Z;T<;oM.#JCtNb,XB=j
=2XiF,G5lBKNc@%>K+NGJDkJUi!BDQ&I=hEMt$4oH"MVr<Y81<Y;lO`+=WC\ZUTU]
`ft2WTrfcD7>gE:'4A9U^]K$BX+1b7!I>mh&FFujq#L7rO73L-Zulrd&H[LY-^8ns
UjC(gHcO'Pa4,OXjF5/AJ&hbCa23a(^oMuF+MTop*qFqJ*/+@p,E`ac!;_PbdqHDP
Um@L4$l\\pj7iofIMV`u,kPZ/UkqX<MR<;>MEi3_KTM-,?45]JS8]YQ]/)s%-qKkm
8@+qGkSetFA;hqu-(kO@iURJo,a'.28^h(h:nrP_LQ$H],-V_!=m5sc&e,ut8lEL'
KW_k[+t@-+a0`%\ZJA,dUB+I:^KA?Di1-.u`rKfu8kbaH3i7JgR][!JJSK_Ybe:N6
^!#KMJNt!p"5tVjIk<dhMC9*gK4BiO&qY(lJq+I6q&'LN9o)c7!>$&uWqr.Z9Lsi=
9;9%L5S\l<'S7m1!)N[rYSMbFP6#V83%u<Qi"$f@"b:h!JY3s5#S;Nj'nDr+!4WJg
]:(8j`<mc&]849BH!lG4*"(VWJ=7pO+=7slQN/-BUlc-Zgq+W3fmsLm-HI5F$g%Eh
*/WoL!*L\"!%3;,&qLoV!FQmuo--2`X%kpRJJ!Wq&Bk+UNJLCLa#cm!8-XW!\,iN3
Ne-C(E:M.lK`U*9aCsASlBTJ!i.1(.J/Fc,I&DL0)uq[aJm]``i.VnZ%m/;&JB/>J
2#Kr'Y0`9HQjK(7=onaj!.p",:07u+aRLZ\+b4MF!dG4e=9*mP'*;_MQghR`UsVcV
Wr_7,_JgT\&Bk1]#;8UTJ9VeMJ,k1?o-):Y:t_.ba;GG#!eK[*/%ke;&Rj(s^qC:'
NY(Oi_USVgm>+:O!LNn=5lcE8-&Z`R!71q%:o?mIKT*h4;KTLKTE'L%#rEeZJ-Z:0
=9\h@++ca,J10fkg3993A5Lqe(&/2r=:>4<(JhW-dpSiA+e/r:".pOiTSNT2[5tZN
"T\T<'OViNTI9e^ViXm@(itC%N7$().hlA<YYlkMYTj06+TY+O;gBb$>k?JI>-3;i
!!jhO0GW,1MUbh%dSRSCD#c30]/J"9.A2?GGuXn?*e9%e!Pg(7@.40k('6/m=$_NY
8[VN$]7Jok!@fFJBfgj-!!#j,!d&(J8JOjMMq&(5Ne"\@3AAuP2:6ZLPOYCV#m*_t
L63?R0K9cL^^U;-)j!;nJjV\`7?<gXVp:9OcbV+4>1`mj7Q5S'OhGYU\F:"?-@c)Q
JSTRlq?kAi!J.`pJ8K5SD2a@VbUS^iNJ__Vn=,KS!s"Hq,&f!<ga=3e!.pRUJ/)Kn
)'i%YMUI=_V[+]$o)f#4'*/J(JOgh7#QTE0^E0TZ!g!MUYQb-D!i8o/!)46/D/b@5
NXPu*JiT8ReTHBJ$-i5FJ]JLT\,h0=++`>o%DW.!?j,(9KVY7Z9:[H1C,#_`#(^Fi
J0]-X\,u^chLU$AJ-a(@^]f;A*J(-m!;H_K5RW.!+BSon\`Jc@.'!=j-S;R<U9GM*
<<"(+Nra+9(eX)=>asOqd\r_J!CDXW'8t]d564"jJgfheU3TEamG*dBfY-8P+O8Ir
^oA!V<Je,7j.5!H7OY:T9(i-9XLoWcH%@G#\RK=/0V>8Y_Z;aLM9$rKOer11o3],9
bX810AQ;oQWe#CA'?J&l-l%:m'unXuQc,\#/aLP`(LSY[$ZnBi+LW'*#*7$8iB$dC
8=>#rR,M_e!N6N9SF0E9)<"$mMP(W5oW7#mZ4Q^B9b_kD(+/$a-fTk/ifnm_+L3%P
,E#A.7r5_sPepo'0B36jitaB0-8OU>1ZLq]j&S%tAhm.9Z2cj'85:^*aWpp2iIXT'
A(Eg'k!%i!5NE#6j;(&B-:6cO6f^^)j8]b;.'d7k3XW*n8C7nJBEnU#-=k+ijOR&d
k"b"2:ZVdWjVC_T-;rq`;rmnM<;<YURS77BY*8N[AU+$$0IL@tqMVLZMYrWKd+mT1
X(6ZcME.KUIUN^q**:do'Cc^t0WL*!Nb2t[N:#\`_rp0<Wo-'VNQ</6=KglTD$hu8
AX79DYf(+_WZWRJB-<lTFXH9Rb=[5+>'cCqGbP5skNAegJSPsX*dc8*I#0mD7s9Ck
0aH0hYCJI"BHWt-N[8@A&M"-lRRn'(Ga_2FMMs<=kP1a[1m_mkQ%>k@@IB27p]pmF
IgWt+b/TSNO\?f]mV(IC$9<PBU(IZH\-QsD&o3mOck.;6Kn--/Ae(49[\%"_UV0d@
Ni33`9@f<k!,3;^U1bh:6!>Q'm=?^O_PX%8>jI8'9*r*5W&PhT5QH?qmk^XpRs<r<
fhDr"K!<uAl^#*IVRl*%]BdJLldic8k.^0T^[)%5Yp]SQQGDhMd0o$k&L-1m:;Z?U
a6\Po!7&E;aSZe:!UO3a!?_CDVU"Q%cg:q`m2"+:-IV9>e*TWSm8hd)B%H?mfBn=F
JCjok`n9[7&'J]K<Y,A-R%+3P&-;LZDAM3uYR#dS,mhX1!@D0<cjuBNip,JLOhGmL
8<M,Q!g?eJJkPBrE!=X$k`h@e8[+)'GTH(K&:gtq-B@R%%[`+N]oP.71[p/#=Z?]R
U7"OUDIAOQLlcB@Kl>iA$310Z:4nG6*J0Kg>nE'"+GQ0V-1D1pJf#WqM1gCe%+hYD
7IZBNG68+Y!\K`>$;I0N30SnQ+57p"!]%%ELlW#OKr2p#l%r/J3I;3k,lfE9!&u(^
j]VY*PW]kF'P:R.``I-kU'\YX!3dHe+!n1B%i6>u!VotN:soa('*ssI!2=,^E!l^9
#Qbu&!B:<#+9Sma'r`;l%hKY0W"]4k$A&6Z!&+pU!!%P*bUK1tJj>M0,6Is[+C5$f
1DgIL(]g?B(4nf`!*GQf"q?rA.?jmo!W>"ZDup#q+ebR^=HEjt5TTq#$@q`5O8olC
:]_.ohN-k:!2pEZaX1<D<#4s:oe6oOfHPmf])ZLaMqo>&fH_]GoDmpC.46?s@W77]
M&-^P!*d"?(?b:O(U_uLM(o]JZLYa)KTH37$,jihQjqALS%Vo7TthD0_+"aL$'TuG
<mqKeOV+=-$5(;BJM^[5p/M*6d0[Pu(f=`*3EGmqaemMYUiCpBfHM[ZJH8V^JL?'^
8BLC+"\-!++<U^c8-o`]"2[>D!"(]\`;]n,.fdB@JDs1=k@+`i4.`a\,G5%*9bKOV
'`gk`?-*.R5_P05(qj#S&>8q7`*re1QiI+8PimQ3p_jLhl)^PIb'ak`#_]2q5J:/,
(^^uY:uVKo-m?A+!9,C.I&DM":)R.GO=*O8;3daj+TMQY!LXOM_[.QD$^:71N6)CF
@;u:X@F[<DgX7&BaKl3;<n%0u!]+3[f:IRMH@fj)!SZ*WW6'XQaadkiq(S'd)R'5*
\fe""N*6ENR6L^ML;2Ap(760^8.Er$k`,sY/W"Ijd,:/r!W]a.!BDqJ\1&&p%h9`R
1Rt6N.1^=.eUeG=%?cp50E@31$1:%Y]:R1_E30^P5+S*lQbXE!TG<e)*.(0jJ,nRr
X="^t$)(2^52W2?#tth*(8>`S=od*'#D"1/iW,IuPi*LE\-rC/'en,DFH=P#5arm(
'*nU9!"Apc5QJ"o!!"5O!<=;4!13gY!!,>-&7>J^'EA?R?ig13'aXjH5QbI(J1N@9
PQ29q]OY2#!!*''+?0@_3<0S?+J8_k&iuHm_SBR;!&PpXN<=_C!-eSu!09AG61BDH
!!%R8!Q_s/`FH2VCt<r%VU]Ij>APHZ!71cqOd*W]n,OB>/qXW?E3]IK00LBW#bZ\J
:>d8q$RC;]!1mjMMrY(_O8o\@H'*UY=g:+8UHok""1V/30E;ltCN\A0L<!l3g22#]
,*:;S4TGO.!!.lYV([aYUjs%>N[=`1&N)M!/;gtFP7<'c!5)Q1!1$,oOjTGA!%A"k
,D6@78j5#HlMs+H>pk78O8s'(&g"2.2ZNieCBJJT^ebrnK`L(8XIP#2gC,5*!Eom;
#*7+4\,sl&#UHXqJ4:E,!>#5S,Cl6pj$%tn5_T6;ib[k0$-78p-n.8hefdT]'*:[$
gj's]cla\M3FII<%"N)sAg4l?_??g7M<Z`*0YkO>!f)f!&goN1OAI;J5SSg(4@/O4
0aOdW=:-il'.YdC+:))'#@U^7-7Yrj0VjM<._#X@D)BCh!7C`O6EKHE'^$W)RKN_i
J=?`C!D.?1!P8aW%_+B(!#u8<6!-\!^Oa6T+GpFq;uh^^bJPl]10W^/Kf'tQ,6/oC
\O0Fuh0E>8@"L!P!c+/kKEVAkJ.dN$&5d!^!H8MeX?efN.u8`f>-N^s3!'hKc9mNo
=`ki^&HZBCGR-q"QsLG[G3^O_Ksh\uMhlmc:?)Qp>Drlu_*EeYTRj5N"^4.sE#40u
+C#K_[f(W1a'gq<B>Ei(L)aEJ#U*[X@=AD%#FIId)MJ0Y:uhfRpfh,2(cj8a\ClrF
(>;&sherK<-sdhJ!!j>P<.G6ZJcW?-?@[P~>

n
Q
Q
q
8.33333 0.0 0.0 8.33333 0.0 0.0 cm
Q
Q
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
